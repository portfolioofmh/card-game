{"version":3,"sources":["images/simpsons_logo.jpg","Card.js","images/burns.png","images/human_fly.png","images/laura_powers.png","images/lou_eddie.png","images/ned.png","images/otto.png","images/skinner.png","images/smithers.png","Board.js","App.js","reportWebVitals.js","index.js"],"names":["Card","props","state","isOpen","openCard","bind","this","cardClick","index","className","onClick","src","logo","alt","image","name","Component","cardImages","Board","start","arrayOrder","i","push","sort","Math","random","setState","order","restart","firstCard","secondCard","openedCards","message","numberOfTries","matches","gameover","findMatch","floor","numOfCards","setTimeout","closeCards","updatedArray","removeFirstIndex","indexOf","splice","removeSecondIndex","id","length","map","item","includes","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.eaaf6a58.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/simpsons_logo.180024aa.jpg\";","import React, { Component } from 'react'\nimport logo from './images/simpsons_logo.jpg'\nimport burns from './images/burns.png'\nimport human_fly from './images/human_fly.png'\nimport laura_powers from './images/laura_powers.png'\nimport lou_eddie from './images/lou_eddie.png'\nimport ned from './images/ned.png'\nimport otto from './images/otto.png'\nimport skinner from './images/skinner.png'\nimport smithers from './images/smithers.png'\n\n\nclass Card extends Component {\n\n\n    constructor(props) {\n        super(props)\n        this.state = {\n            isOpen : false\n        }\n\n        this.openCard= this.openCard.bind(this)\n\n       \n    }\n\n    openCard(){\n        \n        if(!this.props.isOpen){\n           \n            this.props.cardClick(this.props.index);\n        }\n    }\n\n\n    \n\n    render(){\n\n\n\n        return(\n            <div className={'card ' + (this.props.isOpen  ? 'flipped ' : '')} onClick={this.openCard} >\n\n                    <div className=\"front\">\n\n                    \n                        <img src={logo} alt=\"simpons logo\"/>\n                    </div>\n\n                <div className=\"back\" >\n                    <img src={this.props.image.src} alt={this.props.image.name}/>\n\n                </div>\n\n            </div>\n\n        )\n       \n    }\n\n\n}\n\nexport default Card","export default __webpack_public_path__ + \"static/media/burns.388e404e.png\";","export default __webpack_public_path__ + \"static/media/human_fly.b9ad33a1.png\";","export default __webpack_public_path__ + \"static/media/laura_powers.911d91db.png\";","export default __webpack_public_path__ + \"static/media/lou_eddie.486f1991.png\";","export default __webpack_public_path__ + \"static/media/ned.a5b6de72.png\";","export default __webpack_public_path__ + \"static/media/otto.9e036574.png\";","export default __webpack_public_path__ + \"static/media/skinner.2ef06d19.png\";","export default __webpack_public_path__ + \"static/media/smithers.1da45040.png\";","import React, { Component } from 'react'\nimport Card from './Card'\n\nconst numOfCards = 16;\nconst numberOfTries = 6;\nconst cardImages = [\n    {src: './card-game/images/burns.png',  name:'Burns'},\n    {src: './card-game/images/human_fly.png',  name:'Human Fly'},\n    {src: './card-game/images/laura_powers.png',  name:'Laura Powers'},\n    {src: './card-game/images/lou_eddie.png',  name:'Lou & Eddie'},\n    {src: './card-game/images/ned.png',  name:'Ned Flanders'},\n    {src: './card-game/images/otto.png',  name:'Otto'},\n    {src: './card-game/images/skinner.png',  name:'Skinner'},\n    {src: './card-game/images/smithers.png',  name:'Smithers'}\n];\n\nclass Board extends Component {\n\n\n    constructor(props) {\n        super(props)\n        this.state = {\n            order : [],\n            firstCard: null,\n            secondCard: null,\n            openedCards: [],\n            message: '',\n            numberOfTries: numberOfTries,\n            matches: 0,\n            gameover:false\n        }\n\n\n       \n    }\n\n    componentDidMount(){\n        this.start();\n    }\n\n   \n\n    start = () =>{\n        let arrayOrder = []\n        for(let i = 0; i < numOfCards; i++){\n            arrayOrder.push(i)\n        }\n        arrayOrder = arrayOrder.sort(() => Math.random() - 0.5)\n        this.setState({order:arrayOrder});\n\n    }\n\n    restart = () => {\n        this.setState({\n            order : [],\n            firstCard: null,\n            secondCard: null,\n            openedCards: [],\n            message: '',\n            numberOfTries: numberOfTries,\n            matches: 0,\n            gameover: false\n        }, () => this.start() );\n    }\n\n\n\n    findMatch = () => {\n        if( Math.floor(this.state.order[this.state.firstCard]/2) === Math.floor(this.state.order[this.state.secondCard]/2) ){\n            this.setState({\n                firstCard:null,\n                secondCard:null,\n                message: 'match',\n                matches: this.state.matches + 1\n            }, () => {\n                if(this.state.matches === (numOfCards/2)) {\n                    this.setState({\n                        message: 'YOU WIN!',\n                        gameover: true\n                    })\n                }\n            } )\n        }\n        else{\n\n            this.setState({\n                message: 'Not a Match',\n                numberOfTries: this.state.numberOfTries - 1\n            })\n            setTimeout(this.closeCards, 1000)\n          \n        }\n\n       \n    }\n\n    closeCards = () =>{\n        let updatedArray = this.state.openedCards;\n\n        let removeFirstIndex = this.state.openedCards.indexOf(this.state.firstCard);\n        updatedArray.splice(removeFirstIndex , 1);\n\n\n        let removeSecondIndex = this.state.openedCards.indexOf(this.state.secondCard);\n        updatedArray.splice(removeSecondIndex , 1);\n       \n\n        this.setState({\n            firstCard:null,\n            secondCard:null,\n            openedCards:updatedArray\n        })\n\n        if(this.state.numberOfTries === 0){\n            this.setState({\n                message: 'GAME OVER : ( ',\n                gameover: true\n            })\n        }\n\n    }\n\n    cardClick = (index) => {\n\n        if(this.state.numberOfTries > 0 ){\n            let updatedArray = [];\n            updatedArray = this.state.openedCards;\n               updatedArray.push(index)\n            if(this.state.firstCard === null){\n               \n                this.setState({firstCard: index, openedCards: updatedArray});\n    \n    \n            }else{\n                this.setState({secondCard: index , openedCards: updatedArray},\n                () => this.findMatch()   \n               );\n    \n              \n            }\n\n        }\n       \n\n\n\n    }\n   \n\n    render(){\n\n        \n\n        return(\n\n            <div id=\"board-container\">\n                <div id=\"board\">\n\n                {this.state.order.length > 0 ?   \n\n                        \n\n                    \n                    this.state.order.map((item, i) =>  \n                    \n                            <Card key={i} \n                            index={i} \n                            id={item} \n                            cardClick = {this.cardClick}\n                            openedCards = {this.state.openedCards}\n                            isOpen={this.state.openedCards.includes(i)}\n                            image={cardImages[ Math.floor(item/2)]} \n                            />\n                    \n                    )\n\n\n                    \n\n\n                        :''}\n\n\n                </div>\n                <div className=\"message\">\n                    <p>\n                        {this.state.message}\n                        </p>\n\n                    {\n                        this.state.numberOfTries > 0  ?\n                          \n                           \n\n                           <p>\n\n                                {this.state.numberOfTries} Tries Left\n\n                           </p> \n\n                           : ''\n                            \n                            \n                    }\n\n\n                        {\n                        this.state.gameover  ?\n                            <a onClick={this.restart}>\n                                Play Again?\n\n                            </a>\n                        \n\n                          : ''\n                            \n                            \n                    }\n                \n                \n                </div>\n\n                \n\n            </div>\n         \n\n        )\n       \n    }\n\n\n}\n\nexport default Board","\nimport './App.css';\nimport Board from './Board';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Board />\n   \n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}