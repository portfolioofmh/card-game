[{"/Users/mherna14/Sites/card-game/src/index.js":"1","/Users/mherna14/Sites/card-game/src/reportWebVitals.js":"2","/Users/mherna14/Sites/card-game/src/App.js":"3","/Users/mherna14/Sites/card-game/src/Board.js":"4","/Users/mherna14/Sites/card-game/src/Card.js":"5"},{"size":500,"mtime":1609263298000,"results":"6","hashOfConfig":"7"},{"size":362,"mtime":1609263298000,"results":"8","hashOfConfig":"7"},{"size":164,"mtime":1609266461000,"results":"9","hashOfConfig":"7"},{"size":5490,"mtime":1611351437000,"results":"10","hashOfConfig":"7"},{"size":1292,"mtime":1611351146000,"results":"11","hashOfConfig":"7"},{"filePath":"12","messages":"13","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"14"},"ezq0qs",{"filePath":"15","messages":"16","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"14"},{"filePath":"17","messages":"18","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"14"},{"filePath":"19","messages":"20","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"21","usedDeprecatedRules":"14"},{"filePath":"22","messages":"23","errorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"24","usedDeprecatedRules":"25"},"/Users/mherna14/Sites/card-game/src/index.js",[],["26","27"],"/Users/mherna14/Sites/card-game/src/reportWebVitals.js",[],"/Users/mherna14/Sites/card-game/src/App.js",[],"/Users/mherna14/Sites/card-game/src/Board.js",["28"],"import React, { Component } from 'react'\nimport Card from './Card'\n\nconst numOfCards = 16;\nconst numberOfTries = 6;\nconst cardImages = [\n    {src: './images/burns.png',  name:'Burns'},\n    {src: './images/human_fly.png',  name:'Human Fly'},\n    {src: './images/laura_powers.png',  name:'Laura Powers'},\n    {src: './images/lou_eddie.png',  name:'Lou & Eddie'},\n    {src: './images/ned.png',  name:'Ned Flanders'},\n    {src: './images/otto.png',  name:'Otto'},\n    {src: './images/skinner.png',  name:'Skinner'},\n    {src: './images/smithers.png',  name:'Smithers'}\n];\n\nclass Board extends Component {\n\n\n    constructor(props) {\n        super(props)\n        this.state = {\n            order : [],\n            firstCard: null,\n            secondCard: null,\n            openedCards: [],\n            message: '',\n            numberOfTries: numberOfTries,\n            matches: 0,\n            gameover:false\n        }\n\n\n       \n    }\n\n    componentDidMount(){\n        this.start();\n    }\n\n   \n\n    start = () =>{\n        let arrayOrder = []\n        for(let i = 0; i < numOfCards; i++){\n            arrayOrder.push(i)\n        }\n        arrayOrder = arrayOrder.sort(() => Math.random() - 0.5)\n        this.setState({order:arrayOrder});\n\n    }\n\n    restart = () => {\n        this.setState({\n            order : [],\n            firstCard: null,\n            secondCard: null,\n            openedCards: [],\n            message: '',\n            numberOfTries: numberOfTries,\n            matches: 0,\n            gameover: false\n        }, () => this.start() );\n    }\n\n\n\n    findMatch = () => {\n        if( Math.floor(this.state.order[this.state.firstCard]/2) === Math.floor(this.state.order[this.state.secondCard]/2) ){\n            this.setState({\n                firstCard:null,\n                secondCard:null,\n                message: 'match',\n                matches: this.state.matches + 1\n            }, () => {\n                if(this.state.matches === (numOfCards/2)) {\n                    this.setState({\n                        message: 'YOU WIN!',\n                        gameover: true\n                    })\n                }\n            } )\n        }\n        else{\n\n            this.setState({\n                message: 'Not a Match',\n                numberOfTries: this.state.numberOfTries - 1\n            })\n            setTimeout(this.closeCards, 1000)\n          \n        }\n\n       \n    }\n\n    closeCards = () =>{\n        let updatedArray = this.state.openedCards;\n\n        let removeFirstIndex = this.state.openedCards.indexOf(this.state.firstCard);\n        updatedArray.splice(removeFirstIndex , 1);\n\n\n        let removeSecondIndex = this.state.openedCards.indexOf(this.state.secondCard);\n        updatedArray.splice(removeSecondIndex , 1);\n       \n\n        this.setState({\n            firstCard:null,\n            secondCard:null,\n            openedCards:updatedArray\n        })\n\n        if(this.state.numberOfTries === 0){\n            this.setState({\n                message: 'GAME OVER : ( ',\n                gameover: true\n            })\n        }\n\n    }\n\n    cardClick = (index) => {\n\n        if(this.state.numberOfTries > 0 ){\n            let updatedArray = [];\n            updatedArray = this.state.openedCards;\n               updatedArray.push(index)\n            if(this.state.firstCard === null){\n               \n                this.setState({firstCard: index, openedCards: updatedArray});\n    \n    \n            }else{\n                this.setState({secondCard: index , openedCards: updatedArray},\n                () => this.findMatch()   \n               );\n    \n              \n            }\n\n        }\n       \n\n\n\n    }\n   \n\n    render(){\n\n        \n\n        return(\n\n            <div id=\"board-container\">\n                <div id=\"board\">\n\n                {this.state.order.length > 0 ?   \n\n                        \n\n                    \n                    this.state.order.map((item, i) =>  \n                    \n                            <Card key={i} \n                            index={i} \n                            id={item} \n                            cardClick = {this.cardClick}\n                            openedCards = {this.state.openedCards}\n                            isOpen={this.state.openedCards.includes(i)}\n                            image={cardImages[ Math.floor(item/2)]} \n                            />\n                    \n                    )\n\n\n                    \n\n\n                        :''}\n\n\n                </div>\n                <div className=\"message\">\n                    <p>\n                        {this.state.message}\n                        </p>\n\n                    {\n                        this.state.numberOfTries > 0  ?\n                          \n                           \n\n                           <p>\n\n                                {this.state.numberOfTries} Tries Left\n\n                           </p> \n\n                           : ''\n                            \n                            \n                    }\n\n\n                        {\n                        this.state.gameover  ?\n                            <a onClick={this.restart}>\n                                Play Again?\n\n                            </a>\n                        \n\n                          : ''\n                            \n                            \n                    }\n                \n                \n                </div>\n\n                \n\n            </div>\n         \n\n        )\n       \n    }\n\n\n}\n\nexport default Board","/Users/mherna14/Sites/card-game/src/Card.js",["29","30","31","32","33","34","35","36"],"import React, { Component } from 'react'\nimport logo from './images/simpsons_logo.jpg'\nimport burns from './images/burns.png'\nimport human_fly from './images/human_fly.png'\nimport laura_powers from './images/laura_powers.png'\nimport lou_eddie from './images/lou_eddie.png'\nimport ned from './images/ned.png'\nimport otto from './images/otto.png'\nimport skinner from './images/skinner.png'\nimport smithers from './images/smithers.png'\n\n\nclass Card extends Component {\n\n\n    constructor(props) {\n        super(props)\n        this.state = {\n            isOpen : false\n        }\n\n        this.openCard= this.openCard.bind(this)\n\n       \n    }\n\n    openCard(){\n        \n        if(!this.props.isOpen){\n           \n            this.props.cardClick(this.props.index);\n        }\n    }\n\n\n    \n\n    render(){\n\n\n\n        return(\n            <div className={'card ' + (this.props.isOpen  ? 'flipped ' : '')} onClick={this.openCard} >\n\n                    <div className=\"front\">\n\n                    \n                        <img src={logo} alt=\"simpons logo\"/>\n                    </div>\n\n                <div className=\"back\" >\n                    <img src={require( this.props.image.src)} alt={this.props.image.name}/>\n\n                </div>\n\n            </div>\n\n        )\n       \n    }\n\n\n}\n\nexport default Card",["37","38"],{"ruleId":"39","replacedBy":"40"},{"ruleId":"41","replacedBy":"42"},{"ruleId":"43","severity":1,"message":"44","line":209,"column":29,"nodeType":"45","endLine":209,"endColumn":55},{"ruleId":"46","severity":1,"message":"47","line":3,"column":8,"nodeType":"48","messageId":"49","endLine":3,"endColumn":13},{"ruleId":"46","severity":1,"message":"50","line":4,"column":8,"nodeType":"48","messageId":"49","endLine":4,"endColumn":17},{"ruleId":"46","severity":1,"message":"51","line":5,"column":8,"nodeType":"48","messageId":"49","endLine":5,"endColumn":20},{"ruleId":"46","severity":1,"message":"52","line":6,"column":8,"nodeType":"48","messageId":"49","endLine":6,"endColumn":17},{"ruleId":"46","severity":1,"message":"53","line":7,"column":8,"nodeType":"48","messageId":"49","endLine":7,"endColumn":11},{"ruleId":"46","severity":1,"message":"54","line":8,"column":8,"nodeType":"48","messageId":"49","endLine":8,"endColumn":12},{"ruleId":"46","severity":1,"message":"55","line":9,"column":8,"nodeType":"48","messageId":"49","endLine":9,"endColumn":15},{"ruleId":"46","severity":1,"message":"56","line":10,"column":8,"nodeType":"48","messageId":"49","endLine":10,"endColumn":16},{"ruleId":"39","replacedBy":"57"},{"ruleId":"41","replacedBy":"58"},"no-native-reassign",["59"],"no-negated-in-lhs",["60"],"jsx-a11y/anchor-is-valid","The href attribute is required for an anchor to be keyboard accessible. Provide a valid, navigable address as the href value. If you cannot provide an href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/evcohen/eslint-plugin-jsx-a11y/blob/master/docs/rules/anchor-is-valid.md","JSXOpeningElement","no-unused-vars","'burns' is defined but never used.","Identifier","unusedVar","'human_fly' is defined but never used.","'laura_powers' is defined but never used.","'lou_eddie' is defined but never used.","'ned' is defined but never used.","'otto' is defined but never used.","'skinner' is defined but never used.","'smithers' is defined but never used.",["59"],["60"],"no-global-assign","no-unsafe-negation"]